#:kivy 1.0
#:import math math

#:set futuraHeavy 'widgets/FuturaLT-Heavy.ttf'
#:set futuraBook 'widgets/FuturaLT-Book.ttf'

<ImageItem>:
	img_square: img_carre
	border: 2 / self.scale
	size_hint: None, None
	size: 512, 512
	scale: 0.6
	container: container
	scale_min: .48
	scale_max: 1.3


	#btn_more_cross: btn_more_cross
	#btn_triangle1: btn_triangle1
	#img_more_cross: img_more_cross
	#bg_img: bg_img
	description_text: descriptiontxt
	#back_title: back_title
	title: title
	canvas:
		Color:
			rgb: 0, 0, 0
		Rectangle:
			size: self.size

	StencilView:
		size: root.size

		FloatLayout:
			size: root.size
			id: container
				
			Image:
				id: img_carre
				source: root.source
				#size_hint: (1 * (0.3 + 0.7 * root.flip_alpha), 1 * (0.3 + 0.7 * root.flip_alpha))
				y: 0 + ((1-root.flip_alpha) * 141)
				color: (0,0,0,1)

			Label:
				id: title
				text: '' #root.item['nom'].upper() or ''
				font_name: futuraHeavy
				size_hint_y: None
				text_size: (400, 100)
				height: self.texture_size[1] + 20
				width: self.texture_size[0] + 20
				font_size: root.size[0] / 16
				color: 0, 0, 0, 0.5 * root.flip_alpha
				halign: 'center'
				valign: 'bottom'
				pos: root.width/2 - self.width/2 + 2, root.height - 130 -2

			Label:
				text: root.item['nom'].upper() or ''
				font_name: futuraHeavy
				size_hint_y: None
				text_size: (400, 100)
				height: self.texture_size[1] + 20
				width: self.texture_size[0] + 20
				font_size: root.size[0] / 16
				halign: 'center'
				valign: 'bottom'
				color: 1, 1, 1, 1 * root.flip_alpha
				pos: root.width/2 - self.width/2, root.height - 130

#		Image:
#			id: bg_img
#			source: 'widgets/background_item.png'
#			color: root.my_color
#			size: 512, 303
#			y: -root.flip_alpha * 303
#
#		Label:
#			id:back_title
#			text:root.item['nom'].upper() or ''
#			font_name: futuraHeavy
#			font_size: root.size[0] / 25
#			width: self.texture_size[0]
#			height: self.texture_size[1] + 5
#			x: root.width / 6
#			y: (root.width/2 - self.height/2) - 303 * root.flip_alpha
#			color: (1, 1, 1, 1 - root.flip_alpha)
		
		Label:
			id: descriptiontxt
			text:root.item['description'] or ''
			text_size: (4.5 * root.width/6, 150)
			font_name: futuraBook
			size_hint_y: None
			font_size: root.size[0] / 40
			height: self.texture_size[1] 
			width: self.texture_size[0]
			valign: 'top'
			halign: 'center'
			x: root.width / 6
			y: root.title.y - 15 - self.height  # ((root.width/2)  + 0 ) # - 303 * root.flip_alpha
			color: (1, 1, 1, 1)# - root.flip_alpha)

		ToggleButton:
			id: light_button
			background_normal: 'widgets/light.png'
			background_down: 'widgets/light_active.png'
			on_release: root.display_item()
			pos: (root.width/2 - self.width/2, root.description_text.y - self.height - 15) if root.projection else (-100,-100)

#		Button:
#			size: (48, 48)
#			pos: root.width -self.width,  0
#			background_color: (0, 0, 0, 0) 
#			on_release: root.on_btn_more()
#			
#			Image:
#				id:btn_triangle1
#				source: 'widgets/btn_triangle.png'
#				size:64,64
#				pos: root.width - self.width, 0
#				color: (1,1,1,1) if not root.flip_front else root.my_color
#
#			Scatter:
#				id: btn_more_cross
#				size:28,28
#				do_scale: False
#				do_rotation: False
#				do_translation: False, False,
##				scale: 1
#				pos: (root.width - self.width - 5 , 5)
#				Image:
#					id:img_more_cross
#					source:'widgets/btn_more.png'
#					size:28, 28
#					color: root.my_color if not root.flip_front else (1,1,1,1)

<CircularSlider>:
    angle_min: self.value_min * 180
    angle_max: self.value_max * 180

    canvas:
        Color:
            rgb: 0.5490, 1, 1
        Ellipse:
            pos: self.right - self.outer_radius, self.center_y - self.outer_radius
            size: self.outer_radius * 2, self.outer_radius * 2
            angle_start: (root.angle_min + 180) % 360
            angle_end: ((root.angle_max + 180 - 0.00001) % 360)
        Color:
            rgb: 0, 0, 0
        Ellipse:
            pos: self.right - self.inner_radius + 50, self.center_y - self.inner_radius + 50
            size: (self.inner_radius - 50) * 2, (self.inner_radius - 50) * 2
        Color:
            rgb: 1, 1, 1
        Rectangle:
            source: 'widgets/timeline.png'
            pos: self.pos
            size: self.size
        Color:
            rgba: 0.5490, 1, 1, .2
        Line:
            points: (self.right - math.sin(math.radians(self.angle_min)) * self.outer_radius, self.center_y -math.cos(math.radians(self.angle_min)) * self.outer_radius, self.right - math.sin(math.radians(self.angle_min)) * (self.inner_radius - 50), self.center_y -math.cos(math.radians(self.angle_min)) * (self.inner_radius - 50))
        Line:
            points: (self.right - math.sin(math.radians(self.angle_max)) * self.outer_radius, self.center_y -math.cos(math.radians(self.angle_max)) * self.outer_radius, self.right - math.sin(math.radians(self.angle_max)) * (self.inner_radius - 50), self.center_y -math.cos(math.radians(self.angle_max)) * (self.inner_radius - 50))

    BoxLayout:
        size_hint: None, None
        size: (150, 80)
        pos_hint: {'center_x': 0.5, 'center_y': 0.38}
        orientation: 'vertical'
        canvas.before:
            PushMatrix
            Translate:
                xy: root.center_x, root.center_y
            Rotate:
                angle: 90
                axis: 0., 0., 1.
            Translate:
                xy: -root.center_x, -root.center_y
        canvas.after:
            PopMatrix

        Label:
            font_size: 16
            color: (0.5490, 1, 1, 1)
            text: root.text_min
        Label:
            font_size: 16
            color: (0.5490, 1, 1, 1)
            text: root.text_max

<Keyword>:
	color: (1, 1, 1, 1) if self.selected else (.5, .5, .5, 1) 
	canvas.before:
		Color:
			rgb: 1, 1, 1
		Rectangle:
            pos: int(self.center_x - self.texture_size[0] / 2. - 32), int(self.center_y - 10)
			size: 20, 20
			source: 'widgets/circle%s.png' % ('_selected' if self.selected else '')

<SizeSlider>:
	canvas:
		Color:
			rgb: 1, 1, 1
		Rectangle:
			pos: self.x - 40, self.y
			size: (500, 30)
			source: 'widgets/taille.png'
        Color:
            rgb: 0.5490, 1, 1
		Rectangle:
			pos: self.x + self.value_min * self.width, self.center_y - 10
			size: self.width * (self.value_max - self.value_min), 20
