#:kivy 1.0
#:import math math
#:set petita 'widgets/PetitaLight.ttf'
#:set petita_medium 'widgets/PetitaMedium.ttf'
#:set petita_bold 'widgets/PetitaBold.ttf'
#:set arial 'widgets/Arial.ttf'
#:set arialBold 'widgets/ArialBold.ttf'
#:set voces 'widgets/voces.ttf'
#:set futuraHeavy 'widgets/FuturaLT-Heavy.ttf'
#:set futuraBook 'widgets/FuturaLT-Book.ttf'
#:set color_keyword_hi [0.9098039215686274, 0.34509803921568627, 0.06666666666666667, 1] #get_color_from_hex('#e85811')
#:set color_title_hi [0.8862745098039215, 0.19215686274509805, 0.15294117647058825, 1] #get_color_from_hex('#e23127')
#:set color_normal [0.7764705882352941, 0.7764705882352941, 0.7764705882352941, 1] #get_color_from_hex('#c6c6c6'),
#:set totalWidth 1920

<ImageItem>:
	img_square: img_carre
	border: 2 / self.scale
	size_hint: None, None
	size: 512, 512
	scale: 0.6
	container: container
	scale_min: .48
	scale_max: 1.3


	btn_more_cross: btn_more_cross
	btn_triangle1: btn_triangle1
	btn_triangle2: btn_triangle2
	btn_loupe: btn_loupe
	img_more_cross: img_more_cross
	bg_img: bg_img
	description_text: descriptiontxt
	back_title: back_title
	back_subtitle: back_subtitle
	scatter_btn_play: scatter_btn_play

	canvas:
		Color:
			rgb: 0, 0, 0
		Rectangle:
			size: self.size

	StencilView:
		size: root.size

		FloatLayout:
			size: root.size
			id: container
				
			Image:
				id: img_carre
				#mipmap: True
				source: root.source
				#size_hint: (1 * (0.3 + 0.7 * root.flip_alpha), 1 * (0.3 + 0.7 * root.flip_alpha))
				y: 0 + ((1-root.flip_alpha) * 141)
				color: (1,1,1,1) if not root.isPlayingVideo else (0,0,0,1)

			Label:
				text: root.item['nom'].upper() or ''
				font_name: futuraHeavy
				size_hint_y: None
				height: self.texture_size[1] + 20
				width: self.texture_size[0] + 20
				font_size: root.size[0] / 16
				color: 0, 0, 0, 0.5 * root.flip_alpha
				pos: root.width/2 - self.width/2 + 2, root.height / 7 -2

			Label:
				text: root.item['nom'].upper() or ''
				font_name: futuraHeavy
				size_hint_y: None
				height: self.texture_size[1] + 20
				width: self.texture_size[0] + 20
				font_size: root.size[0] / 16
				color: 1, 1, 1, 1 * root.flip_alpha
				pos: root.width/2 - self.width/2, root.height / 7

			Label:
				text: root.item['freefield'].upper() if ('freefield' in root.item) else  ''
				font_name: futuraHeavy
				sizz_hint_y: None
				height: self.texture_size[1] + 20
				width: self.texture_size[0] + 20
				font_size: root.size[0] / 30
				color: 0, 0, 0, 0.5 * root.flip_alpha 
				x: root.width/2 -  self.width/2 +2
				y: -190 -2 if not root.isPlayingVideo else -500

			Label:
				text: root.item['freefield'].upper() if ('freefield' in root.item) else  ''
				font_name: futuraHeavy
				sizz_hint_y: None
				height: self.texture_size[1] + 20
				width: self.texture_size[0] + 20
				font_size: root.size[0] / 30
				color: 1, 1, 1, 1 * root.flip_alpha 
				x:root.width/2 -  self.width/2
				y: -190 if not root.isPlayingVideo else -500


		Image:
			id: bg_img
			source: 'widgets/background_item.png'
			color: root.my_color
			size: 512, 303
			y: -root.flip_alpha * 303

		Label:
			id:back_title
			text:root.item['nom'].upper() or ''
			font_name: futuraHeavy
			font_size: root.size[0] / 25
			width: self.texture_size[0]
			height: self.texture_size[1] + 5
			x: root.width / 6
			y: (root.width/2 - self.height/2) - 303 * root.flip_alpha
			color: (1, 1, 1, 1 - root.flip_alpha)

		Label:
			id:back_subtitle
			text:root.item['freefield'].upper() if ('freefield' in root.item) else ''
			font_name: futuraHeavy
			size_hint_y: None
			font_size: root.size[0] / 40
			width: self.texture_size[0]
			height: self.texture_size[1] + 5
			x: root.width / 6
			y: (root.width/2 - root.back_title.height) - 303 * root.flip_alpha
			color: (1, 1, 1, 1 - root.flip_alpha) 
		
		Label:
			id: descriptiontxt
			text:root.item['description'] or ''
			text_size: (4.5 * root.width/6, 150)
			font_name: futuraBook
			size_hint_y: None
			font_size: root.size[0] / 40
			height: self.texture_size[1] 
			width: self.texture_size[0]
			valign: 'top'
			x: root.width / 6
			y: ((root.width/2)  - 200 ) - 303 * root.flip_alpha
			color: (1, 1, 1, 1 - root.flip_alpha)

		Scatter:
			id: scatter_btn_play
			size:250,50
			do_scale:False
			do_rotation:False
			do_translation:False, False
			scale: 0.5
			x: root.width/6
			y: 36 - 303 * root.flip_alpha if hasattr(root, 'video') else -150
			Button:
				id: btn_play
				size:(250,50)
				background_down: 'widgets/btn_play_active.png'
				background_normal: 'widgets/btn_play.png'
				on_release: root.on_btn_play()
				background_color:(1,1,1, 1 - root.flip_alpha)


		Button:
			size: (48, 48)
			pos: root.width -self.width,  0
			background_color: (0, 0, 0, 0) 
			on_release: root.on_btn_more()
			
			Image:
				id:btn_triangle1
				source: 'widgets/btn_triangle.png'
				size:64,64
				pos: root.width - self.width, 0
				color: (1,1,1,1) if not root.flip_front else root.my_color if not root.isPlayingVideo else (0,0,0,0)

			Scatter:
				id: btn_more_cross
				size:28,28
				do_scale: False
				do_rotation: False
				do_translation: False, False,
				scale: 1
				pos: (root.width - self.width - 5 , 5)
				Image:
					id:img_more_cross
					source:'widgets/btn_more.png'
					size:28, 28
					color: root.my_color if not root.flip_front else (1,1,1,1) if not root.isPlayingVideo else (0,0,0,0)


		Button:
			size: (32, 32)
			pos: 0,  root.height - self.height
			on_release: root.on_zoom()
			background_color: (0, 0, 0, 0)
			
			Image:
				id: btn_triangle2
				source: 'widgets/btn_triangle_inv.png'
				size:64,64
				pos: 0, root.height - self.height
				color: (1,1,1,1) if root.isLoupe else root.my_color if not root.isPlayingVideo else (0,0,0,0)

			Scatter:
				id: scatter_btn_loupe
				size: 28, 28
				do_scale: False
				do_rotation: False
				do_translation: False, False,
				scale: 1
				pos: (5, root.height - self.height - 5)
				Image:
					id:btn_loupe
					source:'widgets/btn_loupe.png'
					size: 28, 28
					color: root.my_color if root.isLoupe else (1,1,1,1) if not root.isPlayingVideo else (0,0,0,0)

		Button:
			size: (64,64)
			pos: (root.width - self.width, root.height - self.height)
			background_normal: 'widgets/btn_close.png'
			background_down: 'widgets/btn_close.png'
			on_release: root.on_stop_video()
			background_color: (0,0,0,0) if not root.isPlayingVideo else (1,1,1,1)

<CalendarSlider>:
	slider_h: hours
	slider_d: days

	#useless but removed automatically in widgets/calendar.py
	MySlider:
		id: hours
		size: 1920-self.rognage, 50
		size_hint: None, None
		top: root.top + 15
		center_x: root.center_x
		canvas:
			Color:
				rgb: 1, 1, 1
			Rectangle:
				pos: self.x-(self.rognage/2), self.y
				size: self.size[0]+self.rognage, self.size[1]
				source: 'widgets/hours.png'
	        Color:
	            rgba: 0.9, 0.53, 0.16, .6
			Rectangle:
				pos: self.x + self.decalage + self.value_min * self.width, self.center_y - self.size[1] / 2
				size: self.width * (self.value_max - self.value_min), self.size[1]
			Color:
				rgba: 1, 1, 1
			Rectangle:
				pos: self.x + self.decalage - 19 + self.value_min * self.width, self.center_y - self.size[1] / 2
				size: 38, 50
				source: 'widgets/pico.png'
			Rectangle:
				pos: self.x + self.decalage - 19 + (self.width) * (self.value_max), self.center_y - self.size[1] / 2
				size: 38, 50
				source: 'widgets/pico.png'

	MySlider:
		id: days
		size: 1920-self.rognage, 42
		size_hint: None, None
		#top: root.top - 40
		y:0
		center_x: root.center_x
		canvas:
			Color:
				rgb: 1, 1, 1
			Rectangle:
				pos: self.x-(self.rognage/2), self.y
				size: self.size[0] + self.rognage, self.size[1] 
				source: 'widgets/calendrier.png'
	        Color:
	            rgba: 0.556862745, 0.780392157, 0.243137255, .6
			Rectangle:
				pos: self.x + self.decalage + self.value_min * self.width, self.center_y - self.size[1] / 2
				size: self.width * (self.value_max - self.value_min), self.size[1]
			#Rectangle:
			#	pos:self.x, self.center_y - self.size[1]/2
			#	size:self.width * (self.value_min), self.size[1]
			#Rectangle:
			#	pos:self.x + self.decalage + self.value_max * self.width, self.center_y - self.size[1]/2
			#	size:self.width * (self.value_max), self.size[1]
			Color:
				rgba: 1,1,1,1
			Rectangle:
				pos: self.x + self.decalage - 50 + self.value_min * self.width, self.center_y - self.size[1] / 2
				size: 55, 46
				source: 'widgets/marker.png'
			Rectangle:
				pos: self.x + self.decalage - 3 + (self.width) * (self.value_max), self.center_y - self.size[1] / 2
				size: 55, 46
				source: 'widgets/marker.png'


<TopCursorNormal>:
    pos_hint:{'y':0.43, 'x':0.5}
    

# Grid Layout for all keywords
<GridKeywords>:
	cols:2
	size:(500, 756)
	spacing: 20

# Keywords group with title and button for each keyword
<GridKeywordsGroup>:
	size: (246,240)
	size_hint: (1,1)
	pos_hint: (0,0)
	cols:1
	rows:2

	buttons_layout: buttonLayout

	canvas:
		Color:
			rgb: (0,0.68235294, 0.9372549,1)
		Rectangle:
			pos: self.pos
			size: (246,240)
			source: 'widgets/background_gameframe.png'
	BoxLayout:
		size_hint: (1,0.21)
		orientation: 'vertical'
		canvas:
			Color:
				rgba: (0,1,0,0)
			Rectangle:
				pos: self.pos
				size: self.size

		Label:
			text: root.title.upper()
			font_name: futuraHeavy
			font_size:12
			color: (1,1,1,1)
			size_hint: (1,1)

	StackLayout:
		id: buttonLayout
		size_hint: (1, 0.79)
		padding: 8
		spacing: 5
		canvas:
			Color:
				rgba: (1,0,0,0)
			Rectangle:
				pos: self.pos
				size: self.size

# Keyword Button
<GridKeyword>:
	background_normal:	'widgets/reponse.png'
	background_down: 'widgets/reponse_active.png'
	size_hint: (None,None)
	size: (225, 28)
	font_name: futuraHeavy
	font_size: 9
 